// Підключаю роутер у застосунок
const myRouter = require('./myRouter');

app.use('/my-router', myRouter);
// Цей застосунок тепер зможе обробляти запити, адресовані ресурсам /my-router та /my-router/about.

// * Метод app.all() використовується для завантаження функцій проміжної обробки у дорозі для всіх методів запитів. Він буває корисний коли нам треба реагувати на будь-яке звернення до сервера.

// У наведеному нижче прикладі обробник буде запущений для запитів, адресованих /anything, незалежно від того, чи використовується GET, POST, PUT, DELETE або будь-який інший метод запиту HTTP, підтримуваний у модулі http.

app.all('/anything', (req, res, next) => {
  console.log('Anything method');
  next(); // Передаю керування далі
});

// * Методи відповіді в res можуть передавати відповідь клієнту та завершувати цикл “запит-відповідь”.
// Якщо жоден із цих методів не буде викликано з обробника маршруту, клієнтський запит зависне.
//    Метод	                 Опис
// res.download()   Запрошення на завантаження файлу
// res.end()	      Завершення процесу відповіді
// res.json()	      Надсилання відповіді JSON
// res.jsonp()	    Надсилання відповіді JSON з підтримкою JSONP
// res.redirect()	  Перенаправлення відповіді
// res.render()	    Виведення шаблону представлення
// res.send()	      Надсилання відповіді різних типів
// res.sendFile()	  Надсилання файлу у вигляді потоку відповідей

// * Ланцюжки методів
// Приклад об'єднаних у ланцюжок обробників маршрутів, визначених за допомогою функції app.route():
app
  .route('/blog')
  .get((req, res) => res.send('Get a list of blog'))
  .post((req, res) => res.send('Add a record to blog'))
  .put((req, res) => res.send('Update some data in blog'));
